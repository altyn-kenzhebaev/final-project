---
- name: "Enable interconnect ports for Mariadb"
  ansible.posix.firewalld:
    rich_rule: "{{ item }}" 
    zone: public
    permanent: true
    immediate: true
    state: enabled
  with_items:
    - 'rule family="ipv4" source address="{{ node1_ip }}" port port="3306" protocol="tcp" accept'
    - 'rule family="ipv4" source address="{{ node2_ip }}" port port="3306" protocol="tcp" accept'
    - 'rule family="ipv4" source address="{{ master_mysql_ip }}" port port="3306" protocol="tcp" accept'
    - 'rule family="ipv4" source address="{{ slave_mysql_ip }}" port port="3306" protocol="tcp" accept'
  no_log: true

- name: "Install MariaDB packages"
  yum:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
    - mariadb-server
    - mariadb
    - python3-PyMySQL

- name: Configure MariaDB
  template:
    dest: /etc/my.cnf.d/mariadb-server.cnf
    src: mariadb-server.cnf.j2
    owner: root
    group: root
    mode: 0644

- name: "Start and enable MariaDB"
  systemd:
    name: mariadb.service
    state: restarted
    enabled: true

- name: Set root user password
  mysql_user: 
    name: root
    password: "{{ mysql_root_password }}"
    login_user: root
    login_unix_socket: /var/lib/mysql/mysql.sock

- name: Create .my.cnf
  template:
   src: "client.my.cnf.j2"
   dest: "/root/.my.cnf"
   owner: root
   group: root
   mode: 0600

- name: Create replication user for master mysql host
  community.mysql.mysql_user:
    name: "{{ mariadb_replication_user }}"
    host: "{{ master_mysql_ip | default('%') }}"
    password: "{{ repl_mysql_password }}"
    priv: "*.*:REPLICATION SLAVE"
    state: present

- name: Create replication user for slave mysql host
  community.mysql.mysql_user:
    name: "{{ mariadb_replication_user }}"
    host: "{{ slave_mysql_ip | default('%') }}"
    password: "{{ repl_mysql_password }}"
    priv: "*.*:REPLICATION SLAVE"
    state: present

- name: Get replication slave status
  community.mysql.mysql_replication:
    mode: getreplica
  ignore_errors: True
  check_mode: no
  register: __mariadb_repl_slave_status
  when: slave_db_server
  
- name: Get replication master status
  community.mysql.mysql_replication:
    mode: getprimary
  delegate_to: "{{ master_db_server }}"
  register: __mariadb_repl_master_status
  when: slave_db_server and not __mariadb_repl_slave_status.Is_Replica

- name: Configure replication settings
  community.mysql.mysql_replication:
    mode: changeprimary
    master_host: "{{ master_db_server }}"
    master_log_file: "{{ __mariadb_repl_master_status.File }}"
    master_log_pos: "{{ __mariadb_repl_master_status.Position }}"
    master_user: "{{ mariadb_replication_user }}"
    master_password: "{{ repl_mysql_password }}"
  when: slave_db_server and not __mariadb_repl_slave_status.Is_Replica

- name: Start replication
  community.mysql.mysql_replication:
    mode: startreplica
  when: slave_db_server and not __mariadb_repl_slave_status.Is_Replica

- name: Delete anonymous MariaDB user
  mysql_user: name="" host={{item}} state=absent
  with_items:
    - localhost
    - "{{ansible_nodename}}"

- name: Delete Hostname based MariaDB user
  mysql_user: name=root host="{{ansible_nodename}}" state=absent

- name: Remove MySQL test database
  mysql_db: name=test state=absent

- name: Create a new database for Wordpress
  community.mysql.mysql_db:
    name: "{{ db_name }}"
    state: present

- name: Add user account for Wordpress
  community.mysql.mysql_user:
    name: "{{ db_user }}"
    password: "{{ db_user_pass }}"
    host: "{{ nodes_net }}"
    state: present
    priv: "{{ db_name }}.*:ALL"
...